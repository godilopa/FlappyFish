-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scaleX,scaleY)
	local physics = { data =
	{ 
		
		["plantaA"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -42, 219  ,  -30, 67  ,  -6, 109  ,  -24, 204  ,  -40, 230  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -36, 7  ,  15, 9  ,  -6, 109  ,  -30, 67  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -57, 70  ,  -27, -291  ,  -1, -292  ,  -36, 7  ,  -55, 97  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -6, 109  ,  15, 9  ,  40, 292  ,  14, 253  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   15, 9  ,  41, 54  ,  57, 251  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   15, 9  ,  41, 3  ,  41, 54  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -36, 7  ,  -1, -292  ,  41, 3  ,  15, 9  }
                    }
                    
                    
                    
		}
		
		, 
		["plantaB"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   42, -219  ,  30, -67  ,  6, -109  ,  24, -204  ,  40, -230  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   36, -7  ,  -15, -9  ,  6, -109  ,  30, -67  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   57, -70  ,  27, 291  ,  1, 292  ,  36, -7  ,  55, -97  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   6, -109  ,  -15, -9  ,  -40, -292  ,  -14, -253  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -15, -9  ,  -41, -54  ,  -57, -251  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -15, -9  ,  -41, -3  ,  -41, -54  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   36, -7  ,  1, 292  ,  -41, -3  ,  -15, -9  }
                    }
                    
                    
                    
		}
		
	} }

        -- apply scale factor
        local sX = scaleX or 1.0
		local sY = scaleY or 1.0
		for bi,body in pairs(physics.data) do
		    for fi,fixture in ipairs(body) do
		        if(fixture.shape) then
		            for ci,coordinate in ipairs(fixture.shape) do
		                if (ci%2) ~= 0 then
		                    fixture.shape[ci] = sX * coordinate
		                else
		                    fixture.shape[ci] = sY * coordinate
		                end
		            end
		        else
		            fixture.radius = sX * fixture.radius
		        end
	    end
	end
	
	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

